P.01->24 (EDIT: from `Programming Forth' book)

First impressions: gorgeous promises. Extensible! Interactive! Simple concepts!

Admittedly, there are some suprising ideas: switching from interpreting to
compiling and vice-versa easily, "pure" stacks-based language with clear
separation beetween the two stacks and the main memory... But for now, I failed
to see how it could be so much better than a interpreted and possibly compiled
language like (c)python. I am certainly too much of a neophyte for now, I
have not really started, so wait & see for now.

However, if it keeps fully and plainly its promises, I will integrate it into
the karsna project and may even use it as a fundamental basis.

-------------------------------------------------------------------------------
Raw fiddling with Gforth :

WORDS

[...]

1
1  ok
.s
.s <1> 1  ok
2
2  ok
.s
.s <2> 1 2  ok
+
+  ok
.
. 3  ok
9 2 / 
9 2 /   ok
.
. 4  ok
1 2 + 3 * .
1 2 + 3 * . 9  ok
1 2 3 + * .
1 2 3 + * . 5  ok
1 2 3 * + .
1 2 3 * + . 7  ok
: squared ( n1 -- n1^2)
: squared ( n1 -- n1^2)  compiled
squared
squared 
:20: Undefined word
>>>squared<<<
Backtrace:
$7F1F1C4D1A68 throw 
$7F1F1C4E7C68 no.extensions 
$7F1F1C4D53A0 compiler-notfound1 
: squared ( n1 -- n1^2) dup * ;
: squared ( n1 -- n1^2) dup * ;  ok
2 squared
2 squared  ok
.s
.s <1> 4  ok
.
. 4  ok
123 squared /
123 squared / 
:25: Stack underflow
123 squared >>>/<<<
Backtrace:

ok
123 squared .
123 squared . 15129  ok
123456789 squared .
123456789 squared . 15 241 578 750 190 521  ok
